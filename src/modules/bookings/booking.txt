import express, { Request, Response } from 'express';
import { db } from '../db';
import { bookings, Booking, NewBooking } from '../models/booking.schema';
import { InferSelectModel } from 'drizzle-orm';

const router = express.Router();

// Create a new booking
router.post('/bookings', async (req: Request, res: Response) => {
  try {
    const newBooking: NewBooking = req.body;
    const result = await db.insert(bookings).values(newBooking).returning();
    res.status(201).json(result);
  } catch (error) {
    console.error('Error creating booking:', error);
    res.status(500).json({ error: 'Failed to create booking' });
  }
});

// Get all bookings
router.get('/bookings', async (_req: Request, res: Response) => {
  try {
    const result: Booking[] = await db.select().from(bookings);
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching bookings:', error);
    res.status(500).json({ error: 'Failed to fetch bookings' });
  }
});

// Get booking by ID
router.get('/bookings/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const result: Booking | undefined = await db.select().from(bookings).where(bookings.id.eq(parseInt(id)));
    if (!result) return res.status(404).json({ error: 'Booking not found' });
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching booking:', error);
    res.status(500).json({ error: 'Failed to fetch booking' });
  }
});

// Update booking
router.put('/bookings/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const updatedData: Partial<NewBooking> = req.body;
    const result = await db.update(bookings).set(updatedData).where(bookings.id.eq(parseInt(id))).returning();
    res.status(200).json(result);
  } catch (error) {
    console.error('Error updating booking:', error);
    res.status(500).json({ error: 'Failed to update booking' });
  }
});

// Delete booking
router.delete('/bookings/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    await db.delete(bookings).where(bookings.id.eq(parseInt(id)));
    res.status(204).send();
  } catch (error) {
    console.error('Error deleting booking:', error);
    res.status(500).json({ error: 'Failed to delete booking' });
  }
});

export default router;
